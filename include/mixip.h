/***************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************
 * Introduction
 **************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************/

/**********************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************//**
 * @file      mixip.h
 * 
 * @version   1.0
 *
 * @date      18-05-2025
 *
 * @brief     MIXIP header file.  
 *  
 * @author    Fábio D. Pacheco, 
 * @email     fabio.d.pacheco@inesctec.pt or pacheco.castro.fabio@gmail.com
 *
 * @copyright Copyright (c) [2025] [Fábio D. Pacheco]
 * 
 * @note      Manuals:
 * 
 **************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************/

/***************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************
 * Definition file
 **************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************/

#ifndef MIXIP_H
#define MIXIP_H

/***************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************
 * External C++ extern macro
 **************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************/
 
#ifdef __cplusplus  
extern "C" {        
#endif

/***************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************
 * Libraries
 **************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************/

#include <stdio.h>
#include <stdint.h>
#include <semaphore.h>
#include <serialposix.h>

/***************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************
 * Data structures
 **************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************/

typedef struct{
  uint8_t network;
  sem_t   tx_wait;
  sem_t   tx_done;
  sem_t   rx_wait;
  sem_t   rx_done;
} flow_t;
  
typedef struct{
  uint8_t  data[ BUFSIZ ];             // Buffer that will contain the serial port received information
  size_t   len;                        // Current length of data
  sem_t    available;                  // Semaphore used to advertise that information is available
  sem_t    empty;                      // Semaphore used to stop a process while the other is processing the information
} buffer_t ;

/***************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************
 * Prototypes
 **************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************/

/**********************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************//**
 * @brief Halts communications to the serial port via dread and dwrite.\n
 *        Its designed to be used for sending specific configuration commands to the serial port on the dloop function. \n
 *        Basically gives total authority over the serial port to the function calling it from dloop scope.
 *  
 * @param[in] flow A structure composed of semaphores to halt the other processes. 
 * 
 * @return Upon success, halting the dread and dwrite, it returns 0. \n
 *         Otherwise, -1 is returned and `errno` is set to indicate the error.
 * 
 *  - `EINVAL`: Invalid argument
 * 
 * @b Example \n
 *  Halting the system to change device configurations: \n
 * @code{.c}
 * int 
 * dloop( flow_t * flow ){
 *   mixip_halt( flow );
 *   change_config( ... );
 *   mixip_continue( flow );
 *   // ...  
 * }
 * @endcode
 *  
 **************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************/
int8_t mixip_halt( flow_t * flow );

/**********************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************//**
 * @brief Continues communications to the serial port via dread and dwrite.\n
 *        Its designed to be used after sending specific configuration commands to the serial port on the dloop function.
 *  
 * @param[in] flow A structure composed of semaphores to halt the other processes. 
 * 
 * @return Upon success, halting the dread and dwrite, it returns 0. \n
 *         Otherwise, -1 is returned and `errno` is set to indicate the error.
 * 
 *  - `EINVAL`: Invalid argument
 * 
 * @b Example \n
 *  Halting the system to change device configurations: \n
 * @code{.c}
 * int 
 * dloop( flow_t * flow ){
 *   mixip_halt( flow );
 *   change_config( ... );
 *   mixip_continue( flow );
 *   // ...  
 * }
 * @endcode
 *  
 **************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************/
int8_t mixip_continue( flow_t * flow );

/***************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************
 * External C++ extern macro
 **************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************/

#ifdef __cplusplus  
}
#endif

/***************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************
 * Definition file
 **************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************/

#endif

/***************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************
 * End file
 **************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************/
